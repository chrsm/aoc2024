--[[
tolerate a SINGLE bad level
]]
import 'util' as util
import 'inspect' as inspect

parse = (txt) ->
  ret = {}

  util.mapln txt, (ln) ->
    rep = {}
    for v in ln\gmatch '(%d+)'
      rep[] = tonumber v

    ret[] = rep

  ret

proc = (t) ->
  n = 0

  for i = 1, #t
    rep = t[i]

    dir = rep[2] - rep[1] -- initial state
    bad = 0

    valid = true
    for k = 1, #rep
      d = rep[k] - (rep[k-1] or rep[k])
      dab = math.abs d
      
      if k > 1 and (dab < 1 or dab > 3 or dir~d < 0)
        bad += 1
        if bad > 1
          valid = false
          break

    if valid
      n += 1

  n

input = util.load_file 'day2_input.txt'

input
 |> parse
 |> proc
 |> print
